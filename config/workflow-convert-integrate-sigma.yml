name: Convert and Integrate Sigma Rules

on:
  pull_request:
    branches:
      - main
    paths:
      - "rules*/**.yml"
      - "pipelines/**.yml"
      - "conversions/**.json"
      - "config.yml"
  issue_comment:
    types: [created]

jobs:
  convert-and-integrate:
    if: github.event_name == 'pull_request' || (github.event_name == 'issue_comment' && github.event.issue.pull_request && github.event.action == 'created')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      packages: read
    steps:
      - name: Get PR branch for comments
        if: github.event_name == 'issue_comment'
        id: get-pr-branch
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
        with:
          script: |
            const { data: pullRequest } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number
            });
            console.log(`PR head branch: ${pullRequest.head.ref}`);
            return pullRequest.head.ref;
          result-encoding: string
      - name: Convert All
        shell: bash
        id: convert_all
        env:
          PULL_REQUEST_NUMBER: ${{ github.event.issue.number }}
          COMMENT_BODY: ${{ github.event.comment.body }}
        run: |
          if [ -z "$COMMENT_BODY" ]; then
            echo "No comment body found"
            echo "convert_all=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          if [[ $COMMENT_BODY == "sigma"* ]]; then
              if [[ $COMMENT_BODY == *"convert all"* ]]; then
                  echo "convert_all=true" >> "$GITHUB_OUTPUT"
              else
                  echo "convert_all=false" >> "$GITHUB_OUTPUT"
              fi
          fi

      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'issue_comment' && steps.get-pr-branch.outputs.result || github.head_ref }}
          fetch-depth: 0

      - name: Convert Sigma Rules
        uses: grafana/sigma-rule-deployment/actions/convert@9951907447e9b3c5c36cb2cdf216480f474131f6
        with:
          config_path: "./config.yml"
          pretty_print: true
          plugin_packages: pysigma-backend-loki,pysigma-backend-splunk
          all_rules: ${{ steps.convert_all.outputs.convert_all }}

      - name: Output Converted Rules
        id: converted-rules-output
        shell: bash
        run: |
          sudo apt-get install -y jq
          git fetch
          git add -A
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref || github.event.pull_request.base.ref || 'main' }} --diff-filter=ACMR -- conversions)
          DELETED_FILES=$(git diff --name-only origin/${{ github.base_ref || github.event.pull_request.base.ref || 'main' }} --diff-filter=D -- conversions)
          if [ -z "$CHANGED_FILES" ]; then
            echo "No new conversions" > ./converted-rules.md
            exit 0
          fi
          echo "## $(echo "${CHANGED_FILES}" | wc -l) conversion(s)" > ./converted-rules.md
          for file in ${CHANGED_FILES}; do
              echo "* [$file](${{ github.server_url }}/${{ github.repository }}/blob/${{ github.event_name == 'issue_comment' && steps.get-pr-branch.outputs.result || github.head_ref }}/$file)" >> ./converted-rules.md
          done
          echo changed_files=${CHANGED_FILES//\\n/ } >> "$GITHUB_OUTPUT"
          echo deleted_files=${DELETED_FILES//\\n/ } >> "$GITHUB_OUTPUT"

      - name: Comment Converted Rules
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
        with:
          script: |
            let { readFileSync } = require('fs');
            let message = readFileSync('./converted-rules.md', 'utf8');
            github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: message
            })

      - name: Cleanup Temporary Files
        run: |
          rm ./converted-rules.md

      - name: Integrate Converted Rules
        id: integrated-rules-output
        uses: grafana/sigma-rule-deployment/actions/integrate@9951907447e9b3c5c36cb2cdf216480f474131f6
        with:
          config_path: "./config.yml"
          pretty_print: true
          changed_files: ${{ steps.converted-rules-output.outputs.changed_files }}
          deleted_files: ${{ steps.converted-rules-output.outputs.deleted_files }}
          grafana_sa_token: ${{ secrets.SERVICE_ACCOUNT_TOKEN }}
          all_rules: ${{ steps.convert_all.outputs.convert_all }}

      - name: Output Integrated Rules
        shell: bash
        env:
          TEST_RESULTS: ${{ steps.integrated-rules-output.outputs.test_query_results }}
        run: |
          sudo apt-get install -y jq
          git fetch
          git add -A
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref || github.event.pull_request.base.ref || 'main' }} --diff-filter=ACMR -- deployments)
          if [ -z "$CHANGED_FILES" ]; then
            echo "No new integrations" > ./integrated-rules.md
            exit 0
          fi
          echo "## $(echo "${CHANGED_FILES}" | wc -l) integration(s)" > ./integrated-rules.md
          for file in ${CHANGED_FILES}; do
              echo "* [$file](${{ github.server_url }}/${{ github.repository }}/blob/${{ github.event_name == 'issue_comment' && steps.get-pr-branch.outputs.result || github.head_ref }}/$file)" >> ./integrated-rules.md
          done
          echo "" >> ./integrated-rules.md
          echo "### Test Queries" >> ./integrated-rules.md
          echo "" >> ./integrated-rules.md
          echo '| File name | Result count | Labels | Errors |' >> ./integrated-rules.md
          echo '| --- | --- | --- | --- |' >> ./integrated-rules.md
          echo ${TEST_RESULTS} | jq --raw-output '. | to_entries | .[] | {key: .key} + .value[] | [ "[\(.key)](\(.link))", (.count // 0), (.labels | length), (.errors | length)] | "| "+ join(" | ") + " |"' >> ./integrated-rules.md

      - name: Comment Integrated Rules
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
        with:
          script: |
            let { readFileSync } = require('fs');
            let message = readFileSync('./integrated-rules.md', 'utf8');
            github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: message
            })

      - name: Cleanup Temporary Files
        run: |
          rm ./integrated-rules.md

      - name: Commit integrated alert rules
        uses: stefanzweifel/git-auto-commit-action@e348103e9026cc0eee72ae06630dbe30c8bf7a79 # v5.1.0
        with:
          commit_message: "Sigma Rules Deployment"
          branch: ${{ github.event_name == 'issue_comment' && steps.get-pr-branch.outputs.result || github.head_ref }}
          skip_checkout: true
          skip_fetch: true
