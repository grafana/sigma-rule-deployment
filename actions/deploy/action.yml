name: "Sigma Rule Deployer"
description: "Deploy alerts based on Sigma rules in Grafana"

inputs:
  config_path:
    description: "Path to the configuration file for the Sigma Rule Deployer"
    required: true
    default: ""
  grafana_sa_token:
    description: "Service account token for Grafana"
    required: true
    default: ""
  fresh_deploy:
    description: "If true, ALL the alert rules in the Grafana Alert folder specified in the config will be deleted, and the alerts in the deployment folder will be created from scratch. ⚠️ Warning: destructive action"
    required: false
    default: "false"
  github_token:
    description: "GitHub token to use for the action."
    required: false
    default: ${{ github.token }}

outputs:
  alerts_created:
    description: "List of alerts UIDs created in Grafana"
    value: ${{ steps.output.outputs.alerts_created }}
  alerts_updated:
    description: "List of alerts UIDs updated in Grafana"
    value: ${{ steps.output.outputs.alerts_updated }}
  alerts_deleted:
    description: "List of alerts UIDs deleted in Grafana"
    value: ${{ steps.output.outputs.alerts_deleted }}

runs:
  using: "composite"
  steps:
    - name: "Checkout repository (fetch-depth: 0)"
      id: checkout
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        persist-credentials: false
        fetch-depth: 0 # Important to ensure we'll have all the commits when a merge includes multiple
    - name: "Detect changed files"
      id: changed-files
      uses: step-security/changed-files@95b56dadb92a30ca9036f16423fd3c088a71ee94 # v46.0.5
      with:
        output_renamed_files_as_deleted_and_added: "true"
    - name: Login to GitHub Container Registry
      uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}
    - name: Determine Image Reference
      id: image-ref
      shell: bash
      env:
        ACTION_REF: ${{ github.action_ref }}
      run: |
        # Check if the ACTION_REF is a tag (starts with v followed by numbers/dots)
        if [[ "$ACTION_REF" =~ ^v[0-9]+(\.[0-9]+)*(\.[0-9]+)?$ ]]; then
          echo "image_ref=$ACTION_REF" >> $GITHUB_OUTPUT
          echo "Using tag: $ACTION_REF"
        elif [[ "$ACTION_REF" == "latest" ]]; then
          echo "image_ref=latest" >> $GITHUB_OUTPUT
          echo "Using latest tag"
        else
          echo "image_ref=sha-$ACTION_REF" >> $GITHUB_OUTPUT
          echo "Using SHA: sha-$ACTION_REF"
        fi
    - name: Run Sigma Rule Deployer
      id: deploy
      shell: bash
      env:
        CONFIG_PATH: ${{ inputs.config_path }}
        GRAFANA_SA_TOKEN: ${{ inputs.grafana_sa_token }}
        FRESH_DEPLOY: ${{ inputs.fresh_deploy }}
        ADDED_FILES: ${{ steps.changed-files.outputs.added_files }}
        MODIFIED_FILES: ${{ steps.changed-files.outputs.modified_files }}
        DELETED_FILES: ${{ steps.changed-files.outputs.deleted_files }}
        COPIED_FILES: ${{ steps.changed-files.outputs.copied_files }}
        IMAGE_REF: ${{ steps.image-ref.outputs.image_ref }}
      run: |
        docker run --rm \
            -v "$(pwd):/sigma-rules" \
            -w /sigma-rules \
            -e GITHUB_OUTPUT="/sigma-rules/github-output" \
            -e CONFIG_PATH="$CONFIG_PATH" \
            -e DEPLOYER_GRAFANA_SA_TOKEN="$GRAFANA_SA_TOKEN" \
            -e DEPLOYER_FRESH_DEPLOY="$FRESH_DEPLOY" \
            -e ADDED_FILES="$ADDED_FILES" \
            -e MODIFIED_FILES="$MODIFIED_FILES" \
            -e DELETED_FILES="$DELETED_FILES" \
            -e COPIED_FILES="$COPIED_FILES" \
            "ghcr.io/grafana/sigma-rule-deployment/sigma-rule-deployer:$IMAGE_REF" \
            deploy
    - name: Move Output
      id: output
      shell: bash
      run: |
        mv github-output $GITHUB_OUTPUT
    - name: Get Grafana Instance
      if: success() && github.event_name == 'push'
      id: grafana-instance
      shell: bash
      env:
        CONFIG_PATH: ${{ inputs.config_path }}
      run: |
        GRAFANA_INSTANCE=$(yq -r '.deployment.grafana_instance' "${CONFIG_PATH}")
        echo "grafana_instance=${GRAFANA_INSTANCE}" >> $GITHUB_OUTPUT
    - name: Comment Status
      if: success() && github.event_name == 'push'
      uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
      env:
        ALERTS_CREATED: ${{ steps.output.outputs.alerts_created }}
        ALERTS_UPDATED: ${{ steps.output.outputs.alerts_updated }}
        ALERTS_DELETED: ${{ steps.output.outputs.alerts_deleted }}
        GRAFANA_INSTANCE: ${{ steps.grafana-instance.outputs.grafana_instance }}
      with:
          script: |
            const url = process.env.GRAFANA_INSTANCE.replaceAll("\"", "");

            const createdUids = process.env.ALERTS_CREATED.split(" ").filter(uid => uid !== "");
            const updatedUids = process.env.ALERTS_UPDATED.split(" ").filter(uid => uid !== "");
            const deletedUids = process.env.ALERTS_DELETED.split(" ").filter(uid => uid !== "");

            let createdUrls = [];
            let updatedUrls = [];

            if (url) {
              createdUrls = createdUids.map(uid => `${url}/alerting/grafana/${uid}/view`);
              updatedUrls = updatedUids.map(uid => `${url}/alerting/grafana/${uid}/view`);
            }

            const body = `
            ## Sigma Rule Deployment Status

            | Created | Updated | Deleted |
            | --- | --- | --- |
            | ${createdUids.length} | ${updatedUids.length} | ${deletedUids.length} |

            ### Created

            ${createdUrls.length === createdUids.length ? createdUrls.map((url, index) => `- [${createdUids[index]}](${url})`).join("\n") : createdUids.map(uid => `- ${uid}`).join("\n")}

            ### Updated

            ${updatedUrls.length === updatedUids.length ? updatedUrls.map((url, index) => `- [${updatedUids[index]}](${url})`).join("\n") : updatedUids.map(uid => `- ${uid}`).join("\n")}

            ### Deleted

            ${deletedUids.map(uid => `- ${uid}`).join("\n")}

            `;

            const associatedPrs = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
            });

            if (associatedPrs.data.length > 0) {
              for (const pr of associatedPrs.data) {
                const nodeId = pr.node_id;

                const query = `mutation AddComment($body: String!, $subjectId: ID!) {
                addComment(input: {
                  body: $body,
                  subjectId: $subjectId,
                }) {
                  subject {
                    id
                    ... on PullRequest {
                      number
                    }
                  } 
                }
                }`

                const variables = {
                  body: body,
                  subjectId: nodeId
                };

                await github.graphql(query, variables);
              }
            }
    - name: Comment Status
      if: failure() && github.event_name == 'push'
      uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
      with:
          script: |
            const associatedPrs = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
            });

            if (associatedPrs.data.length > 0) {
              for (const pr of associatedPrs.data) {
                const nodeId = pr.node_id;

                const query = `mutation AddComment {
                addComment(input: {
                  body: "Sigma Rules Deployment Failed",
                  subjectId: "${nodeId}",
                }) {
                  subject {
                    id
                    ... on PullRequest {
                      number
                    }
                  } 
                }
                }`

                await github.graphql(query);
              }
            }
