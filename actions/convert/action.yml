name: "Sigma Rule Converter"
description: "Convert Sigma rules to target query languages using sigma-cli."
author: "Mostafa Moradian"

inputs:
  config_path:
    description: "Path to the Sigma conversion config file."
    required: true
    default: "./config.yaml"
  plugin_packages:
    description: "Comma-separated list of Sigma CLI plugin packages to install."
    required: false
    default: ""
  render_traceback:
    description: "Whether to render the traceback in the output."
    required: false
    default: "false"
  pretty_print:
    description: "Pretty print the JSON output"
    required: false
    default: "false"
  all_rules:
    description: "Convert all rules specified in the config file."
    required: false
    default: "false"
  actions_username:
    description: "Username of the automation that commits conversions"
    required: false
    default: "github-actions[bot]"
  changed_files_from_base:
    description: "Whether to use the changed files from the base branch"
    required: false
    default: "false"
  conversion_path:
    description: "The path to the conversion folder"
    required: false
    default: "conversions"

runs:
  using: "composite"
  steps:
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}
    - name: Get Last Commit or base_ref
      if: ${{ github.event_name == 'pull_request' && inputs.changed_files_from_base == 'false' }}
      id: commits
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
      env:
        ACTIONS_USERNAME: ${{ inputs.actions_username }}
      with:
        script: |
          const iterator = await github.paginate(github.rest.pulls.listCommits.endpoint.merge({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.payload.pull_request.number,
            per_page: 1
          }));
          let commit = "";
          let first_commit = "";
          let last_commit = "";
          for (const remote_commit of iterator) {
            if (commit === "" && remote_commit.parents.length > 0) {
              commit = remote_commit.parents[0].sha;
              first_commit = remote_commit.sha;
            }
            if (remote_commit.commit.committer.name === process.env.ACTIONS_USERNAME) {
              commit = remote_commit.sha;
              last_commit = remote_commit.sha;
            }
          }

          return {
            commit,
            first_commit,
            last_commit
          };
    - name: Select Commit
      id: previous-commit
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
      env:
        COMMIT: ${{ steps.commits.outputs.result }}
      with:
        script: |
          const output = JSON.parse(process.env.COMMIT);
          console.log(`Last commit or base ref: ${output.commit}`);
          return output.commit;
        result-encoding: string
    - name: Select First Commit
      id: first-commit
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
      env:
        COMMIT: ${{ steps.commits.outputs.result }}
      with:
        script: |
          const output = JSON.parse(process.env.COMMIT);
          console.log(`PR First Commit: ${output.first_commit}`);
          return output.first_commit;
        result-encoding: string
    - name: Select Last Commit
      id: last-commit
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
      env:
        COMMIT: ${{ steps.commits.outputs.result }}
      with:
        script: |
          const output = JSON.parse(process.env.COMMIT);
          console.log(`PR Last Commit by automation: ${output.last_commit}`);
          return output.last_commit;
        result-encoding: string
    - name: Get Changed Files
      id: changed-files
      shell: bash
      env:
        BASE_REF: ${{ steps.previous-commit.outputs.result || github.event.pull_request.base.ref || 'origin/HEAD' }}
      run: |
        CHANGED_FILES=$(git diff "$BASE_REF" --name-only --diff-filter=ACMR)
        DELETED_FILES=$(git diff "$BASE_REF" --name-only --diff-filter=D)

        echo all_changed_files=${CHANGED_FILES//\\n/} >> "$GITHUB_OUTPUT"
        echo deleted_files=${DELETED_FILES//\\n/} >> "$GITHUB_OUTPUT"
 
    - name: Run Sigma Rule Converter
      id: convert
      shell: bash
      env:
        CONFIG_PATH: ${{ inputs.config_path }}
        PLUGIN_PACKAGES: ${{ inputs.plugin_packages }}
        RENDER_TRACEBACK: ${{ inputs.render_traceback }}
        PRETTY_PRINT: ${{ inputs.pretty_print }}
        ALL_RULES: ${{ inputs.all_rules }}
        CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        DELETED_FILES: ${{ steps.changed-files.outputs.deleted_files }}
        ACTION_REF: ${{ github.action_ref }}
      run: |
        docker run --rm \
            -v "$(pwd):/sigma-rules" \
            -w /sigma-rules \
            -e GITHUB_WORKSPACE=/sigma-rules \
            -e CONFIG_PATH="$CONFIG_PATH" \
            -e PLUGIN_PACKAGES="$PLUGIN_PACKAGES" \
            -e RENDER_TRACEBACK="$RENDER_TRACEBACK" \
            -e PRETTY_PRINT="$PRETTY_PRINT" \
            -e ALL_RULES="$ALL_RULES" \
            -e CHANGED_FILES="$CHANGED_FILES" \
            -e DELETED_FILES="$DELETED_FILES" \
            "ghcr.io/grafana/sigma-rule-deployment/sigma-rule-deployer:sha-$ACTION_REF" \
            convert

    - name: Generate Comment Data
      id: generate-comment-data
      shell: bash
      env:
        BASE_REF: ${{ steps.last-commit.outputs.result || steps.first-commit.outputs.result || github.base_ref || github.event.pull_request.base.ref || 'origin/HEAD' }}
        CONVERSION_PATH: ${{ inputs.conversion_path }}
      run: |
        CHANGED_FILES=$(git diff "$BASE_REF" --name-only --diff-filter=ACMR -- "$CONVERSION_PATH")
        DELETED_FILES=$(git diff "$BASE_REF" --name-only --diff-filter=D -- "$CONVERSION_PATH")
        echo changed_files=${CHANGED_FILES//\\n/} >> $GITHUB_OUTPUT
        echo deleted_files=${DELETED_FILES//\\n/} >> $GITHUB_OUTPUT


    - name: Comment Conversions
      id: comment-conversions
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
      env:
        BASE_REF: ${{ steps.first-commit.outputs.result || github.base_ref || github.event.pull_request.base.ref || 'HEAD' }}
        CHANGED_FILES: ${{ steps.generate-comment-data.outputs.changed_files }}
        DELETED_FILES: ${{ steps.generate-comment-data.outputs.deleted_files }}
      with:
        script: |
          const changedFiles = process.env.CHANGED_FILES.split(' ').filter(file => file.trim() !== '');
          const deletedFiles = process.env.DELETED_FILES.split(' ').filter(file => file.trim() !== '');


          const associatedPrs = await github.rest.repos.listPullRequestsAssociatedWithCommit({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: process.env.BASE_REF,
          });

          if (associatedPrs.data.length > 0) {
            for (const pr of associatedPrs.data) {
              const comment = `
          ### Sigma Rule Conversions

          | Changed | Deleted |
          | --- | --- |
          | ${changedFiles.length} | ${deletedFiles.length} |

          ### Changed Files

          ${changedFiles.length ? changedFiles.map(file => `- [${file}](https://github.com/${context.repo.owner}/${context.repo.repo}/blob/${process.env.BASE_REF}/${file})`).join("\n") : "No files changed"}

          ### Deleted Files

          ${deletedFiles.length ? deletedFiles.map(file => `- ${file}`).join("\n") : "No files deleted"}

          `;

              const nodeId = pr.node_id;

              const query = `mutation AddComment($body: String!, $subjectId: ID!) {
                addComment(input: {
                  body: $body,
                  subjectId: $subjectId,
                }) {
                  subject {
                    id
                    ... on PullRequest {
                      number
                    }
                  } 
                }
              }`

              const variables = {
                body: comment,
                subjectId: nodeId
              };

              await github.graphql(query, variables);
            }
          }

          return '';
