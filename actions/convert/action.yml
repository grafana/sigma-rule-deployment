name: "Sigma Rule Converter"
description: "Convert Sigma rules to target query languages using sigma-cli."
author: "Mostafa Moradian"

inputs:
  config_path:
    description: "Path to the Sigma conversion config file."
    required: true
    default: "./config.yaml"
  plugin_packages:
    description: "Comma-separated list of Sigma CLI plugin packages to install."
    required: false
    default: ""
  render_traceback:
    description: "Whether to render the traceback in the output."
    required: false
    default: "false"
  pretty_print:
    description: "Pretty print the JSON output"
    required: false
    default: "false"
  all_rules:
    description: "Convert all rules specified in the config file."
    required: false
    default: "false"
  actions_username:
    description: "Username of the automation that commits conversions"
    required: false
    default: "github-actions[bot]"
  changed_files_from_base:
    description: "Whether to use the changed files from the base branch"
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}
    - name: Get Last Commit or base_ref
      if: ${{ github.event_name == 'pull_request' && inputs.changed_files_from_base == 'false' }}
      id: last-commit
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
      env:
        ACTIONS_USERNAME: ${{ inputs.actions_username }}
      with:
        script: |
          const iterator = github.paginate(github.rest.pulls.listCommits, {
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.payload.pull_request.number,
            per_page: 1
          });
          let commit = "";
          for await (const { data } of iterator) {
            if (commit === "") {
              commit = data[0].sha;
            }
            for (const { commit } of data) {
              if (commit.committer.name === process.env.ACTIONS_USERNAME) {
                commit = commit.sha;
              }
            }
          }
          return commit;
        result-encoding: string
    - name: Get Changed Files
      id: changed-files
      shell: bash
      env:
        DIFF_COMMIT: ${{ steps.last-commit.outputs.result }}
        BASE_REF: ${{ github.event.pull_request.base.ref }}
      run: |
        # Precedence of comparison:
        # 1. The last commit on the PR
        # 2. The base branch of the PR
        # 3. origin/HEAD (default branch)

        COMPARE=$(git rev-parse --abbrev-ref origin/HEAD)
        if [ -n "$BASE_REF" ]; then
          COMPARE=$BASE_REF
        fi
        if [ -n "$DIFF_COMMIT" ]; then
          COMPARE=$DIFF_COMMIT
        fi

        CHANGED_FILES=$(git diff --name-only $COMPARE --diff-filter=ACMR)
        DELETED_FILES=$(git diff --name-only $COMPARE --diff-filter=D)

        echo all_changed_files=${CHANGED_FILES//\\n/} >> "$GITHUB_OUTPUT"
        echo deleted_files=${DELETED_FILES//\\n/} >> "$GITHUB_OUTPUT"
 
    - name: Run Sigma Rule Converter
      id: convert
      shell: bash
      env:
        CONFIG_PATH: ${{ inputs.config_path }}
        PLUGIN_PACKAGES: ${{ inputs.plugin_packages }}
        RENDER_TRACEBACK: ${{ inputs.render_traceback }}
        PRETTY_PRINT: ${{ inputs.pretty_print }}
        ALL_RULES: ${{ inputs.all_rules }}
        CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        DELETED_FILES: ${{ steps.changed-files.outputs.deleted_files }}
        ACTION_REF: ${{ github.action_ref }}
      run: |
        docker run --rm \
            -v "$(pwd):/sigma-rules" \
            -w /sigma-rules \
            -e GITHUB_WORKSPACE=/sigma-rules \
            -e CONFIG_PATH="$CONFIG_PATH" \
            -e PLUGIN_PACKAGES="$PLUGIN_PACKAGES" \
            -e RENDER_TRACEBACK="$RENDER_TRACEBACK" \
            -e PRETTY_PRINT="$PRETTY_PRINT" \
            -e ALL_RULES="$ALL_RULES" \
            -e CHANGED_FILES="$CHANGED_FILES" \
            -e DELETED_FILES="$DELETED_FILES" \
            "ghcr.io/grafana/sigma-rule-deployment/sigma-rule-deployer:sha-$ACTION_REF" \
            convert
