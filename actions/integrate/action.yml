name: "Grafana Query Integration"
description: "Take converted rules and convert them into deployable outputs (alert rules, dashboards, etc.) and test them."
author: "security-operations"

inputs:
  config_path:
    description: "Path to the configuration file for the Sigma Rule Deployer"
    required: true
    default: ""
  grafana_sa_token:
    description: "Service account token for Grafana for query testing"
    required: false
    default: ""
  pretty_print:
    description: "Pretty print the JSON output"
    required: false
    default: "false"
  output_log_lines:
    description: "Output log lines to the outputs of the test_query_results"
    required: false
    default: "false"
  all_rules:
    description: "Whether to integrate all rules"
    required: false
    default: "false"
  changed_files_from_base:
    description: "Whether to use the changed files from the base branch"
    required: false
    default: "false"
  actions_username:
    description: "The username of the actions user"
    required: false
    default: "github-actions[bot]"
  continue_on_query_testing_errors:
    description: "Continue integration process even when query testing fails, but print errors and continue the action"
    required: false
    default: "false"

outputs:
  rules_integrated:
    description: "The repository file names changed (added/updated or removed) by this Action"
    value: ${{ steps.set-output.outputs.rules_integrated }}
  test_query_results:
    description: "The results of testing the queries against the datasource for the past hour"
    value: ${{ steps.set-output.outputs.test_query_results }}

runs:
  using: "composite"
  steps:
    - name: Retrieve conversion and deployment paths from config
      id: config-paths
      shell: bash
      env:
        CONFIG_PATH: ${{ inputs.config_path }}
      run: |
        sudo apt-get install -y yq
        CONVERSION_PATH=$(yq --raw-output '.folders.conversion_path' "${CONFIG_PATH}")
        echo "conversion_path=${CONVERSION_PATH}" >> $GITHUB_OUTPUT
        DEPLOYMENT_PATH=$(yq --raw-output '.folders.deployment_path' "${CONFIG_PATH}")
        echo "deployment_path=${DEPLOYMENT_PATH}" >> $GITHUB_OUTPUT

    - name: Login to GitHub Container Registry
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 #v3.4.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}
    - name: Get Last Commit or base_ref
      if: ${{ github.event_name == 'pull_request' && inputs.changed_files_from_base == 'false' }}
      id: commits
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7.0.1
      env:
        ACTIONS_USERNAME: ${{ inputs.actions_username }}
      with:
        script: |
          const iterator = await github.paginate(github.rest.pulls.listCommits.endpoint.merge({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.payload.pull_request.number,
            per_page: 1
          }));
          let commit = "";
          let first_commit = "";
          let last_commit = "";
          for (const remote_commit of iterator) {
            if (commit === "" && remote_commit.parents.length > 0) {
              commit = remote_commit.parents[0].sha;
              first_commit = remote_commit.sha;
            }
            if (remote_commit.commit.committer.name === process.env.ACTIONS_USERNAME) {
              commit = remote_commit.sha;
              last_commit = remote_commit.sha;
            }
          }

          return {
            commit,
            first_commit,
            last_commit
          };
    - name: Select Commit
      id: previous-commit
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7.0.1
      env:
        COMMIT: ${{ steps.commits.outputs.result }}
      with:
        script: |
          const output = JSON.parse(process.env.COMMIT);
          console.log(`Last commit or base ref: ${output.commit}`);
          return output.commit;
        result-encoding: string
    - name: Select First Commit
      id: first-commit
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7.0.1
      env:
        COMMIT: ${{ steps.commits.outputs.result }}
      with:
        script: |
          const output = JSON.parse(process.env.COMMIT);
          console.log(`PR First Commit: ${output.first_commit}`);
          return output.first_commit;
        result-encoding: string
    - name: Select Last Commit
      id: last-commit
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7.0.1
      env:
        COMMIT: ${{ steps.commits.outputs.result }}
      with:
        script: |
          const output = JSON.parse(process.env.COMMIT);
          console.log(`PR Last Commit by automation: ${output.last_commit}`);
          return output.last_commit;
        result-encoding: string
    - name: Calculate Change Files
      id: changed-files
      shell: bash
      env:
        CONVERSION_PATH: ${{ steps.config-paths.outputs.conversion_path }}
        BASE_REF: ${{ steps.previous-commit.outputs.result || github.base_ref || github.event.pull_request.base.ref || 'origin/HEAD' }}
      run: |
        git fetch
        CHANGED_FILES=$(git diff "$BASE_REF" --name-only --diff-filter=ACMR -- "$CONVERSION_PATH")
        DELETED_FILES=$(git diff "$BASE_REF" --name-only --diff-filter=D -- "$CONVERSION_PATH")
        echo all_changed_files=${CHANGED_FILES//\\n/} >> "$GITHUB_OUTPUT"
        echo deleted_files=${DELETED_FILES//\\n/} >> "$GITHUB_OUTPUT"

    - name: Run Sigma Rule Integrator
      id: integrate
      shell: bash
      env:
        CONFIG_PATH: ${{ inputs.config_path }}
        GRAFANA_SA_TOKEN: ${{ inputs.grafana_sa_token }}
        PRETTY_PRINT: ${{ inputs.pretty_print }}
        CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        DELETED_FILES: ${{ steps.changed-files.outputs.deleted_files }}
        ALL_RULES: ${{ inputs.all_rules }}
        CONTINUE_ON_QUERY_TESTING_ERRORS: ${{ inputs.continue_on_query_testing_errors }}
        IMAGE_REF: ${{ github.action_ref == 'latest' && 'latest' || format('sha-{0}', github.action_ref) }}
      run: |
        docker run --rm \
            -v "$(pwd):/sigma-rules" \
            -w /sigma-rules \
            -e GITHUB_OUTPUT=/sigma-rules/github-output \
            -e INTEGRATOR_CONFIG_PATH="$CONFIG_PATH" \
            -e INTEGRATOR_GRAFANA_SA_TOKEN="$GRAFANA_SA_TOKEN" \
            -e PRETTY_PRINT="$PRETTY_PRINT" \
            -e CHANGED_FILES="$CHANGED_FILES" \
            -e DELETED_FILES="$DELETED_FILES" \
            -e ALL_RULES="$ALL_RULES" \
            -e CONTINUE_ON_QUERY_TESTING_ERRORS="$CONTINUE_ON_QUERY_TESTING_ERRORS" \
            "ghcr.io/grafana/sigma-rule-deployment/sigma-rule-deployer:$IMAGE_REF" \
            integrate
    - name: Set output
      id: set-output
      shell: bash
      run: |
        mv github-output $GITHUB_OUTPUT

    - name: Generate Comment Data
      id: generate-comment-data
      shell: bash
      env:
        BASE_REF: ${{ steps.last-commit.outputs.result || steps.first-commit.outputs.result || github.base_ref || github.event.pull_request.base.ref || 'origin/HEAD' }}
        DEPLOYMENT_PATH: ${{ steps.config-paths.outputs.deployment_path }}
      run: |
        git add "$DEPLOYMENT_PATH"
        CHANGED_FILES=$(git diff "$BASE_REF" --name-only --diff-filter=ACMR -- "$DEPLOYMENT_PATH")
        DELETED_FILES=$(git diff "$BASE_REF" --name-only --diff-filter=D -- "$DEPLOYMENT_PATH")

        echo changed_files=${CHANGED_FILES//\\n/} >> $GITHUB_OUTPUT
        echo deleted_files=${DELETED_FILES//\\n/} >> $GITHUB_OUTPUT

    - name: Comment Integrations
      id: comment-integrations
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7.0.1
      env:
        HEAD_REF: ${{ steps.first-commit.outputs.result || github.head_ref || github.event.pull_request.head.ref || 'HEAD' }}
        CHANGED_FILES: ${{ steps.generate-comment-data.outputs.changed_files }}
        DELETED_FILES: ${{ steps.generate-comment-data.outputs.deleted_files }}
        TEST_RESULTS: ${{ steps.set-output.outputs.test_query_results }}
      with:
        script: |
          const changedFiles = process.env.CHANGED_FILES.split(' ').filter(file => file.trim() !== '');
          const deletedFiles = process.env.DELETED_FILES.split(' ').filter(file => file.trim() !== '');
          let testResults = {};
          try {
            testResults = JSON.parse(process.env.TEST_RESULTS);
          } catch (e) {
            console.log("No test results found");
          }

          let resultTable = `| File name | Link | Result count | Errors |\n| --- | --- | --- | --- |\n`;

          for (const [key, value] of Object.entries(testResults)) {
            for (const result of value) {
              resultTable += `| ${key} | [See in Explore](${result.link}) | ${result.stats.count} | ${result.stats.errors.length} |\n`;
            }
          }

          const associatedPrs = await github.rest.repos.listPullRequestsAssociatedWithCommit({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: process.env.HEAD_REF,
          });

          if (associatedPrs.data.length > 0) {
            for (const pr of associatedPrs.data) {
              const comment = `
          ### Sigma Rule Integrations

          | Changed | Deleted |
          | --- | --- |
          | ${changedFiles.length} | ${deletedFiles.length} |

          ### Changed Files

          ${changedFiles.length ? changedFiles.map(file => `- [${file}](https://github.com/${context.repo.owner}/${context.repo.repo}/blob/${pr.head.ref}/${file})`).join("\n") : "No files changed"}

          ### Deleted Files

          ${deletedFiles.length ? deletedFiles.map(file => `- ${file}`).join("\n") : "No files deleted"}

          ### Test Results

          ${resultTable}
          `;

              const nodeId = pr.node_id;

              const query = `mutation AddComment($body: String!, $subjectId: ID!) {
                addComment(input: {
                  body: $body,
                  subjectId: $subjectId,
                }) {
                  subject {
                    id
                    ... on PullRequest {
                      number
                    }
                  } 
                }
              }`

              const variables = {
                body: comment,
                subjectId: nodeId
              };

              await github.graphql(query, variables);
            }
          }

          return '';
